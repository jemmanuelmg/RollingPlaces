// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RollingPlaces.Web.Data;

namespace RollingPlaces.Web.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RollingPlaces.Web.Data.Entities.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("RollingPlaces.Web.Data.Entities.CityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("RollingPlaces.Web.Data.Entities.PhotoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("PhotoPath");

                    b.Property<int?>("PlaceId");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("RollingPlaces.Web.Data.Entities.PlaceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId");

                    b.Property<int?>("CityId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("RollingPlaces.Web.Data.Entities.QualificationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("PlaceId");

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("RollingPlaces.Web.Data.Entities.PhotoEntity", b =>
                {
                    b.HasOne("RollingPlaces.Web.Data.Entities.PlaceEntity", "Place")
                        .WithMany("Photos")
                        .HasForeignKey("PlaceId");
                });

            modelBuilder.Entity("RollingPlaces.Web.Data.Entities.PlaceEntity", b =>
                {
                    b.HasOne("RollingPlaces.Web.Data.Entities.CategoryEntity", "Category")
                        .WithMany("Places")
                        .HasForeignKey("CategoryId");

                    b.HasOne("RollingPlaces.Web.Data.Entities.CityEntity", "City")
                        .WithMany("Places")
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("RollingPlaces.Web.Data.Entities.QualificationEntity", b =>
                {
                    b.HasOne("RollingPlaces.Web.Data.Entities.PlaceEntity", "Place")
                        .WithMany("Qualifications")
                        .HasForeignKey("PlaceId");
                });
#pragma warning restore 612, 618
        }
    }
}
